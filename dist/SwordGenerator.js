"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.SwordGenerator=exports.Sword=void 0;var _three=require("three"),seedrandom=_interopRequireWildcard(require("seedrandom"));function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)if(Object.prototype.hasOwnProperty.call(a,c)){var d=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(a,c):{};d.get||d.set?Object.defineProperty(b,c,d):b[c]=a[c]}return b.default=a,b}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}function getRandomInt(a,b,c){var d=Math.floor,e=Math.ceil;return b=e(b),c=d(c),d(a()*(c-b))+b}function getSlope(a,b,c,d){return(d-b)/(c-a)}var Sword=function a(b){_classCallCheck(this,a),_defineProperty(this,"style",void 0),_defineProperty(this,"geometry",void 0),_defineProperty(this,"triangles",void 0),_defineProperty(this,"vertices",void 0),_defineProperty(this,"colors",void 0),_defineProperty(this,"normals",void 0),this.style=b,this.geometry=new _three.BufferGeometry,this.triangles=[],this.vertices=[],this.colors=[],this.normals=[]};exports.Sword=Sword;var SwordGenerator=function(){var b=Math.floor;function a(b){_classCallCheck(this,a),_defineProperty(this,"seed",void 0),_defineProperty(this,"randGenerator",void 0),this.seed=b,this.randGenerator=""==b?seedrandom.default():seedrandom.default(b)}return _createClass(a,[{key:"generateSword",value:function d(a,b){var c=new Sword(a.style);this.buildBlade(a,b,c),this.buildGuard(a,b,c),this.buildHandle(a,b,c),this.buildPommel(a,b,c),c.geometry.addAttribute("position",new _three.BufferAttribute(new Float32Array(c.vertices),3)),c.geometry.addAttribute("color",new _three.BufferAttribute(new Float32Array(c.colors),3)),c.geometry.computeVertexNormals();new _three.MeshPhongMaterial({specular:1118481,shininess:250,side:_three.DoubleSide,vertexColors:_three.VertexColors});return c}},{key:"buildBlade",value:function x(c,d,e){var f=c.length,g=d.baseWidth*d.fullerWidthRatio,h=d.bladeThickness/4,j=getRandomInt(this.randGenerator,1,d.maxBaseDivs+1),k=getRandomInt(this.randGenerator,1,d.maxMidDivs+1),l=b(this.randGenerator()*d.maxTipDivs)+1,m=j+k+l,n=f*d.bladeBaseProportion,o=f*d.bladeMidProportion,p=f*(1-(d.bladeBaseProportion+d.bladeMidProportion));e.vertices.concat(a.createBladeCrossSection(c.baseWidth,h,g,d));var q=a.extrudeTopMultiple(e.vertices,new _three.Vector3(0,f/m,0),m);e.vertices.concat(q.vertices),e.triangles.concat(q.triangles);var r=a.getAllVertsIndicesAsLayers(e.vertices,m,f),s=a.getLeftEdgeVertIndices(e.vertices,c.baseWidth),t=a.getRightEdgeVertIndices(e.vertices,c.baseWidth);e.vertices=a.modifyEdgeWidth(this,e.vertices,s,t,c.baseWidth,d.bladeWidthToleranceRatio);var u=a.getTopVertIndices(e.vertices);e.vertices=a.createBladeTip(e.vertices,u);var v=0;if(0==e.vertices.length%3)v=e.vertices.length/3;else throw"Incorrect number of vertex values";for(var w=0;w<v;w++)e.colors.push(200),e.colors.push(200),e.colors.push(200);return e}},{key:"buildGuard",value:function n(a,b,c){for(var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:.3,e=4<arguments.length&&void 0!==arguments[4]?arguments[4]:.3,f=5<arguments.length&&void 0!==arguments[5]?arguments[5]:1,g=6<arguments.length&&void 0!==arguments[6]?arguments[6]:4,h=new _three.BoxGeometry(g*d,.2,f),j=new _three.BufferGeometry().fromGeometry(h),k=j.getAttribute("position"),l=0;l<k.count;l++)c.vertices.push(k.getX(l)),c.vertices.push(k.getY(l)),c.vertices.push(k.getZ(l));for(var k=j.getAttribute(""),l=0;l<k.count;l++)c.vertices.push(k.getX(l)),c.vertices.push(k.getY(l)),c.vertices.push(k.getZ(l));for(var l=0;l<k.count;l++)c.colors.push(112),c.colors.push(82),c.colors.push(0);for(var m=j.getIndex(),l=0;l<m.count;l++)c.vertices.push(k.getX(l)),c.vertices.push(k.getY(l)),c.vertices.push(k.getZ(l));return c}},{key:"buildHandle",value:function m(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:1.35,e=4<arguments.length&&void 0!==arguments[4]?arguments[4]:.1,f=5<arguments.length&&void 0!==arguments[5]?arguments[5]:1,g=new _three.CylinderGeometry(e,e,d,8);g.translate(0,-d/2,0);for(var h=new _three.BufferGeometry().fromGeometry(g),j=h.getAttribute("position"),k=0;k<j.count;k++)c.vertices.push(j.getX(k)),c.vertices.push(j.getY(k)),c.vertices.push(j.getZ(k));for(var j=h.getAttribute(""),k=0;k<j.count;k++)c.vertices.push(j.getX(k)),c.vertices.push(j.getY(k)),c.vertices.push(j.getZ(k));for(var k=0;k<j.count;k++)c.colors.push(112),c.colors.push(82),c.colors.push(0);for(var l=h.getIndex(),k=0;k<l.count;k++)c.vertices.push(j.getX(k)),c.vertices.push(j.getY(k)),c.vertices.push(j.getZ(k));return c}},{key:"buildPommel",value:function m(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:.6,e=4<arguments.length&&void 0!==arguments[4]?arguments[4]:1.35,f=5<arguments.length&&void 0!==arguments[5]?arguments[5]:.5,g=new _three.SphereGeometry(f*d,5,4);g.translate(0,-e,0);for(var h=new _three.BufferGeometry().fromGeometry(g),j=h.getAttribute("position"),k=0;k<j.count;k++)c.vertices.push(j.getX(k)),c.vertices.push(j.getY(k)),c.vertices.push(j.getZ(k));for(var j=h.getAttribute(""),k=0;k<j.count;k++)c.vertices.push(j.getX(k)),c.vertices.push(j.getY(k)),c.vertices.push(j.getZ(k));for(var k=0;k<j.count;k++)c.colors.push(225),c.colors.push(200),c.colors.push(90);for(var l=h.getIndex(),k=0;k<l.count;k++)c.vertices.push(j.getX(k)),c.vertices.push(j.getY(k)),c.vertices.push(j.getZ(k));return c}}],[{key:"createBladeCrossSection",value:function f(a,b,c,d){var e=[];return e.push(a/-2),e.push(0),e.push(0),e.push(c/-2),e.push(0),e.push(d.bladeThickness/2),d.applyFuller?(e.push(0),e.push(0),e.push(d.bladeThickness/-2+b)):(e.push(0),e.push(0),e.push(d.bladeThickness/-2)),e.push(c/2),e.push(0),e.push(d.bladeThickness/-2),e.push(a/2),e.push(0),e.push(0),e.push(c/2),e.push(0),e.push(d.bladeThickness/2),d.applyFuller?(e.push(0),e.push(0),e.push(d.bladeThickness/2-b)):(e.push(0),e.push(0),e.push(d.bladeThickness/2)),e.push(c/-2),e.push(0),e.push(d.bladeThickness/2),e}},{key:"extrudeTopMultiple",value:function j(b,c,d){for(var e,f=b.slice(),g=[],h=0;h<d;h++)e=a.extrudeTop(f,c),f.concat(e.vertices),g.concat(e.triangles);return{vertices:f,triangles:g}}},{key:"extrudeTop",value:function f(b,c){var d=a.getTopVertIndices(b),e=a.extrudeFace(b,d,c);return e}},{key:"extrudeFace",value:function s(a,b,c){if(0==b.length)throw"No vertices given to extrude";var d=0;if(0==a.length%3)d=a.length/3;else throw"Incorrect number of vertex values";for(var e=d,f=[],g=[],h=0;h<b.length;h++){var k=a[3*b[h]],l=a[3*b[h]+1],m=a[3*b[h]+2],n=k+c.x,o=l+c.y,p=m+c.z;g.push(n),g.push(o),g.push(p),f.push(e+h)}for(var h=0,q=0,r=[];h<b.length;)h==b.length-1?(r.push(f[q]),r.push(b[0]),r.push(b[h]),r.push(f[0]),r.push(b[0]),r.push(f[q])):(r.push(f[q]),r.push(b[h+1]),r.push(b[h]),r.push(f[q+1]),r.push(b[h+1]),r.push(f[q])),h++,q++;return{vertices:g,triangles:r}}},{key:"modifyEdgeWidth",value:function m(a,b,c,d,e,f){for(var g=!(6<arguments.length&&void 0!==arguments[6])||arguments[6],h=e-f*e,j=e+f*e,k=e,l=0;l<c.length;l++)k=e+a.randGenerator()*(j-h),b[3*c[l]+0]=-(k/2);for(var l=0;l<d.length;l++)g?l<c.length&&(b[3*d[l]+0]=-b[3*c[l]]):(k=e+a.randGenerator()*(j-h),b[3*d[l]+0]=k/2);return b}},{key:"createBladeTip",value:function d(a,b){for(var c=0;c<b.length;c++)a[3*b[c]+0]=0,a[3*b[c]+2]=0;return a}},{key:"getAllVertsIndicesAsLayers",value:function h(a,b){var c=[],d=0;if(0==a.length%3)d=a.length/3;else throw"Incorrect number of vertex values";for(var e,f=0;f<b;f++){e=[];for(var g=0;g<d;g++)a[3*g+1]==f&&e.push(g);c.push(e)}return c}},{key:"getTopVertIndices",value:function h(a,b){var c=[],d=0;if(0==a.length%3)d=a.length/3;else throw"Incorrect number of vertex values";if(null!=b)for(var e=0;e<d;e++)a[3*e+1]==b&&c.push(e);else{for(var f=-1,g=-1,e=0;e<d;e++)a[3*e+1]>f&&(g=e,f=a[3*e+1]);for(var e=0;e<d;e++)a[3*e+1]==f&&c.push(e)}return c}},{key:"getLeftEdgeVertIndices",value:function f(a,b){var c=[],d=0;if(0==a.length%3)d=a.length/3;else throw"Incorrect number of vertex values";for(var e=0;e<d;e++)a[3*e]==-b/2&&c.push(e);return c}},{key:"getRightEdgeVertIndices",value:function f(a,b){var c=[],d=0;if(0==a.length%3)d=a.length/3;else throw"Incorrect number of vertex values";for(var e=0;e<d;e++)a[3*e]==b/2&&c.push(e);return c}}]),a}();exports.SwordGenerator=SwordGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,